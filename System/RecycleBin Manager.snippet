<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>
         RecycleBin Manager
      </Title>
      <Author>Elektro H@cker</Author>
      <Description>
         Obtiene información sobre la pepelera de reciclaje y los archivos eliminados, también realiza distintas operaciones relacionadas.
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
      </Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>aaaaaaaaa</ID>
          <ToolTip>sfsdf</ToolTip>
          <Default>
          </Default>
          <Function>sdfsdf</Function>
        </Literal>
      </Declarations>
      <Code Language="vb"><![CDATA[

' ***********************************************************************
' Author   : Elektro
' Created  : 01-17-2014
' Modified : 01-19-2014
' ***********************************************************************
' <copyright file="RecycleBinManager.vb" company="Elektro Studios">
'     Copyright (c) Elektro Studios. All rights reserved.
' </copyright>
' ***********************************************************************

' Instructions
' 1. Add a reference to 'Microsoft.WindowsAPICodePack.dll'.
' 2. Add a reference to 'Microsoft.WindowsAPICodePack.Shell.dll'.

#Region " Public Members Summary "

' ----------
' Properties
' ----------
'
' MainBin.Files
' MainBin.Folders
' MainBin.Items
' MainBin.ItemsCount
' MainBin.LastDeletedFile
' MainBin.LastDeletedFolder
' MainBin.LastDeletedItem
' MainBin.Size

' -------
' Methods
' -------
'
' MainBin.Empty()
' MainBin.RefreshIcon()
'
' Tools.Empty()
' Tools.GetSize()
' Tools.GetDeletedFiles()
' Tools.GetDeletedFolders()
' Tools.GetDeletedItems()
' Tools.GetItemsCount()
' Tools.GetLastDeletedFile()
' Tools.GetLastDeletedFolder()
' Tools.GetLastDeletedItem()
' Tools.DeleteItem
' Tools.UndeleteItem
' Tools.InvokeItemVerb

#End Region

#Region " Usage Examples "

#Region " Example 1 "

'' Empties all the Recycle Bins.
'RecycleBinManager.MainBin.Empty()

'' Empties the Recycle Bin of the "E" drive.
'RecycleBinManager.Tools.Empty("E", RecycleBinManager.Tools.RecycleBinFlags.DontShowConfirmation)

'' Updates the Main Recycle Bin icon.
'RecycleBinManager.MainBin.RefreshIcon()


'' Gets the accumulated size (in bytes) of the Main Recycle Bin.
'Dim RecycledSize As Long = RecycleBinManager.MainBin.Size

'' Gets the accumulated size (in bytes) of the Recycle Bin on "E" drive.
'Dim RecycledSizeE As Long = RecycleBinManager.Tools.GetSize("E")


'' Gets the total deleted items count of the Main recycle bin.
'Dim RecycledItemsCount As Long = RecycleBinManager.MainBin.ItemsCount

'' Gets the total deleted items count of the Recycle Bin on "E" drive.
'Dim RecycledItemsCountE As Long = RecycleBinManager.Tools.GetDeletedItems("E").Count


'' Get all the deleted items inside the Main Recycle Bin.
'Dim RecycledItems As ShellObject() = RecycleBinManager.MainBin.Items

'' Get all the deleted files inside the Main Recycle Bin.
'Dim RecycledFiles As ShellFile() = RecycleBinManager.MainBin.Files

'' Get all the deleted folders inside the Main Recycle Bin.
'Dim RecycledFolders As ShellFolder() = RecycleBinManager.MainBin.Folders


'' Get all the deleted items inside the Recycle Bin on "E" drive.
'Dim RecycledItemsE As ShellObject() = RecycleBinManager.Tools.GetDeletedItems("E")

'' Get all the deleted files inside the Recycle Bin on "E" drive.
'Dim RecycledFilesE As ShellFile() = RecycleBinManager.Tools.GetDeletedFiles("E")

'' Get all the deleted folders inside the Recycle Bin on "E" drive.
'Dim RecycledFoldersE As ShellFolder() = RecycleBinManager.Tools.GetDeletedFolders("E")


'' Gets the Last deleted Item inside the Main Recycle Bin.
'MsgBox(RecycleBinManager.MainBin.LastDeletedItem.Name)

'' Gets the Last deleted Item inside the Recycle Bin on "E" drive
'MsgBox(RecycleBinManager.Tools.GetLastDeletedItem("E").Name)


'' Undeletes an item.
'RecycleBinManager.Tools.UndeleteItem(RecycleBinManager.MainBin.LastDeletedItem)

'' Permanently deletes an item.
'RecycleBinManager.Tools.DeleteItem(RecycleBinManager.MainBin.LastDeletedItem)

'' Invokes an Item verb
'RecycleBinManager.Tools.InvokeItemVerb(RecycleBinManager.MainBin.LastDeletedItem, RecycleBinManager.Tools.ItemVerbs.Properties)

'' Invokes a custom Item verb
'RecycleBinManager.Tools.InvokeItemVerb(RecycleBinManager.MainBin.LastDeletedItem, "play")

#End Region

#Region " Example 2 "

'Private Sub Test() Handles MyBase.Shown

'    Dim sb As New System.Text.StringBuilder

'    ' Get all the deleted items inside all the Recycle Bins.
'    Dim RecycledItems As ShellObject() = RecycleBinManager.MainBin.Items

'    ' Loop through the deleted Items (Ordered by las deleted).
'    For Each Item As ShellFile In (From itm In RecycledItems
'                                   Order By itm.Properties.GetProperty("System.Recycle.DateDeleted").ValueAsObject
'                                   Descending)

'        ' Append the property bags information.
'        sb.AppendLine(String.Format("Full Name....: {0}",
'                                    Item.Name))

'        sb.AppendLine(String.Format("Item Name....: {0}",
'                                    Item.Properties.System.FileName.Value))

'        sb.AppendLine(String.Format("Deleted From.: {0}",
'                                    Item.Properties.GetProperty("System.Recycle.DeletedFrom").ValueAsObject))

'        sb.AppendLine(String.Format("Item Type....: {0}",
'                                   Item.Properties.System.ItemTypeText.Value))

'        sb.AppendLine(String.Format("Item Size....: {0}",
'                                    CStr(Item.Properties.System.Size.Value)))

'        sb.AppendLine(String.Format("Attributes...: {0}",
'                                    [Enum].Parse(GetType(IO.FileAttributes),
'                                                 Item.Properties.System.FileAttributes.Value).ToString))

'        sb.AppendLine(String.Format("Date Deleted.: {0}",
'                                    Item.Properties.GetProperty("System.Recycle.DateDeleted").ValueAsObject))

'        sb.AppendLine(String.Format("Date Modified: {0}",
'                                    CStr(Item.Properties.System.DateModified.Value)))

'        sb.AppendLine(String.Format("Date Created.: {0}",
'                                    CStr(Item.Properties.System.DateCreated.Value)))

'        MsgBox(sb.ToString)
'        sb.Clear()

'    Next Item

'End Sub

#End Region

#End Region

#Region " Imports "

Imports System.ComponentModel
Imports System.IO
Imports System.Runtime.InteropServices
Imports System.Text
Imports Microsoft.WindowsAPICodePack.Shell

#End Region

''' <summary>
''' Retrieves Recycle Bin's information and performs other operations.
''' </summary>
Public NotInheritable Class RecycleBinManager

#Region " Recycle Bin Folder "

    ''' <summary>
    ''' The Recycle Bin virtual folder object.
    ''' </summary>
    Private Shared ReadOnly RecycleBin As IKnownFolder = KnownFolders.RecycleBin

#End Region

#Region " API "

    ''' <summary>
    ''' WinAPI things.
    ''' </summary>
    Private NotInheritable Class NativeMethods

#Region " Methods "

        ''' <summary>
        ''' Empties the Recycle Bin on the specified drive.
        ''' </summary>
        ''' <param name="hWnd">A handle to the parent window of any dialog boxes that might be displayed during the operation.
        ''' This parameter can be NULL.</param>
        ''' <param name="RootPath">The address of a null-terminated string of maximum length MAX_PATH that contains the path of the
        ''' root drive on which the Recycle Bin is located.
        ''' This parameter can contain the address of a string formatted with the drive, folder, and subfolder names,
        ''' for example 'c:\windows\system\'.
        ''' It can also contain an empty string or NULL.
        ''' If this value is an empty string or NULL, all Recycle Bins on all drives will be emptied.</param>
        ''' <param name="Flags">Specifies the Recycle bin behavior, this parameter can be one or more flags.</param>
        ''' <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
        <DllImport("shell32.dll", EntryPoint:="SHEmptyRecycleBin", CharSet:=CharSet.Unicode)>
        Public Shared Function EmptyRecycleBin(
                      Optional ByVal hWnd As IntPtr = Nothing,
                      Optional ByVal RootPath As String = Nothing,
                      Optional ByVal Flags As Tools.RecycleBinFlags = Nothing
        ) As Boolean
        End Function

        ''' <summary>
        ''' Updates the Recycle Bin icon on the desktop to reflect the state of the systemwide Recycle Bin,
        ''' for example if an error occurs during an 'EmptyRecycleBin' operation.
        ''' But since the other Recycle Bin management functions will update this icon on their own,
        ''' there's almost no reason why your applications would need to call this function explicitly.
        ''' </summary>
        ''' <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
        <DllImport("shell32.dll", EntryPoint:="SHUpdateRecycleBinIcon")>
        Public Shared Function UpdateRecycleBinIcon(
        ) As Boolean
        End Function

        ''' <summary>
        ''' Retrieves the accumulated size of the Recycle Bin and the number of items in it, for a specified drive.
        ''' </summary>
        ''' <param name="RootPath">The address of a null-terminated string of maximum length MAX_PATH to contain the path of the
        ''' root drive on which the Recycle Bin is located.
        ''' This parameter can contain the address of a string formatted with the drive, folder,
        ''' and subfolder names (C:\Windows\System32\).</param>
        ''' <param name="QueryRBInfo">The address of a SHQUERYRBINFO structure that receives the Recycle Bin information.
        ''' The 'StructSize' member of the structure must be set to the size of the structure before calling this API.</param>
        ''' <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
        <DllImport("shell32.dll", EntryPoint:="SHQueryRecycleBin", CharSet:=CharSet.Unicode)>
        Public Shared Function QueryRecycleBin(
                      ByVal RootPath As String,
                      ByRef QueryRBInfo As SHQueryRBInfo
        ) As Boolean
        End Function

        ''' <summary>
        ''' Performs an operation on a specified file..
        ''' </summary>
        ''' <param name="lpExecInfo">
        ''' A pointer to a 'ShellExecuteInfo' structure that contains and receives information about
        ''' the application being executed.
        ''' </param>
        ''' <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        <DllImport("Shell32", CharSet:=CharSet.Auto, SetLastError:=True)> _
        Public Shared Function ShellExecuteEx(
                  ByRef lpExecInfo As ShellExecuteInfo
    	) As Boolean
        End Function

#End Region

#Region " Structures "

        ''' <summary>
        ''' Contains the accumulated size and item count information retrieved by the 'QueryRecycleBin' function.
        ''' </summary>
        <Description("'QueryRBInfo' parameter of 'QueryRecycleBin' function.")>
        <StructLayout(LayoutKind.Sequential)> _
        Public Structure SHQueryRBInfo

            ''' <summary>
            ''' The size of the structure, in bytes.
            ''' This member must be filled in prior to calling the function.
            ''' </summary>
            Public StructSize As Integer

            ''' <summary>
            ''' The total size of all the objects in the specified Recycle Bin, in bytes.
            ''' </summary>
            Public BinSize As Long

            ''' <summary>
            ''' The total number of items in the specified Recycle Bin.
            ''' </summary>
            Public ItemCount As Long

        End Structure

        ''' <summary>
        ''' Contains information used by the 'ShellExecuteEx' function.
        ''' </summary>
        <Description("'lpExecInfo' parameter used in 'ShellExecuteEx' function")>
        Public Structure ShellExecuteInfo

            ''' <summary>
            ''' Required. 
            ''' The size of this structure, in bytes.
            ''' </summary>
            Public cbSize As Integer

            ''' <summary>
            ''' Flags that indicate the content and validity of the other structure members.
            ''' </summary>
            Public fMask As Integer

            ''' <summary>
            ''' Optional. 
            ''' A handle to the parent window, 
            ''' used to display any message boxes that the system might produce while executing this function. 
            ''' This value can be NULL.
            ''' </summary>
            Public hwnd As IntPtr

            ''' <summary>
            ''' A string, referred to as a verb, that specifies the action to be performed. 
            ''' The set of available verbs depends on the particular file or folder. 
            ''' Generally, the actions available from an object's shortcut menu are available verbs. 
            ''' This parameter can be NULL, in which case the default verb is used if available. 
            ''' If not, the "open" verb is used. 
            ''' If neither verb is available, the system uses the first verb listed in the registry. 
            ''' </summary>
            <MarshalAs(UnmanagedType.LPTStr)> Public lpVerb As String

            ''' <summary>
            ''' The address of a null-terminated string that specifies the name of the file 
            ''' or object on which ShellExecuteEx will perform the action specified by the lpVerb parameter. 
            ''' The system registry verbs that are supported by the ShellExecuteEx function include "open" 
            ''' for executable files and document files and "print" for document files 
            ''' for which a print handler has been registered. 
            ''' Other applications might have added Shell verbs through the system registry, 
            ''' such as "play" for .avi and .wav files.
            ''' To specify a Shell namespace object, pass the fully qualified parse name 
            ''' and set the SEE_MASK_INVOKEIDLIST flag in the fMask parameter.
            ''' </summary>
            <MarshalAs(UnmanagedType.LPTStr)> Public lpFile As String

            ''' <summary>
            ''' Optional. 
            ''' The address of a null-terminated string that contains the application parameters. 
            ''' The parameters must be separated by spaces. 
            ''' If the lpFile member specifies a document file, lpParameters should be NULL.
            ''' </summary>
            <MarshalAs(UnmanagedType.LPTStr)> Public lpParameters As String

            ''' <summary>
            ''' Optional. 
            ''' The address of a null-terminated string that specifies the name of the working directory. 
            ''' If this member is NULL, the current directory is used as the working directory.
            ''' </summary>
            <MarshalAs(UnmanagedType.LPTStr)> Public lpDirectory As String

            ''' <summary>
            ''' Required. 
            ''' Flags that specify how an application is to be shown when it is opened; 
            ''' one of the SW_ values listed for the ShellExecute function. 
            ''' If lpFile specifies a document file, the flag is simply passed to the associated application. 
            ''' It is up to the application to decide how to handle it.
            ''' </summary>
            Dim nShow As WindowShowCommand

            ''' <summary>
            ''' If SEE_MASK_NOCLOSEPROCESS is set and the ShellExecuteEx call succeeds, 
            ''' it sets this member to a value greater than 32. 
            ''' If the function fails, it is set to an SE_ERR_XXX error value that indicates the cause of the failure. 
            ''' Although hInstApp is declared as an HINSTANCE for compatibility with 16-bit Windows applications, 
            ''' it is not a true HINSTANCE. 
            ''' It can be cast only to an int and compared to either 32 or the following SE_ERR_XXX error codes.
            ''' </summary>
            Dim hInstApp As IntPtr

            ''' <summary>
            ''' The address of an absolute ITEMIDLIST structure (PCIDLIST_ABSOLUTE) 
            ''' to contain an item identifier list that uniquely identifies the file to execute. 
            ''' This member is ignored if the fMask member does not include SEE_MASK_IDLIST or SEE_MASK_INVOKEIDLIST.
            ''' </summary>
            Dim lpIDList As IntPtr

            ''' <summary>
            ''' The address of a null-terminated string that specifies one of the following
            ''' A ProgId. For example, "Paint.Picture".
            ''' A URI protocol scheme. For example, "http".
            ''' A file extension. For example, ".txt".
            ''' A registry path under HKEY_CLASSES_ROOT that names a subkey that contains one or more Shell verbs. 
            ''' This key will have a subkey that conforms to the Shell verb registry schema, such as shell\verb name.
            ''' </summary>
            <MarshalAs(UnmanagedType.LPTStr)> Public lpClass As String

            ''' <summary>
            ''' A handle to the registry key for the file type. 
            ''' The access rights for this registry key should be set to KEY_READ. 
            ''' This member is ignored if fMask does not include SEE_MASK_CLASSKEY.
            ''' </summary>
            Public hkeyClass As IntPtr

            ''' <summary>
            ''' A keyboard shortcut to associate with the application. 
            ''' The low-order word is the virtual key code, and the high-order word is a modifier flag (HOTKEYF_).
            ''' For a list of modifier flags, see the description of the WM_SETHOTKEY message. 
            ''' This member is ignored if fMask does not include SEE_MASK_HOTKEY.
            ''' </summary>
            Public dwHotKey As Integer

            ''' <summary>
            ''' A handle to the icon for the file type. 
            ''' This member is ignored if fMask does not include SEE_MASK_ICON. 
            ''' This value is used only in Windows XP and earlier. 
            ''' It is ignored as of Windows Vista.
            ''' </summary>
            Public hIcon As IntPtr

            ''' <summary>
            ''' A handle to the monitor upon which the document is to be displayed. 
            ''' This member is ignored if fMask does not include SEE_MASK_HMONITOR.
            ''' </summary>
            Public hProcess As IntPtr

        End Structure

#End Region

    End Class

#End Region

#Region " MainBin CLASS "

    ''' <summary>
    ''' Retrieves information about the Main Recycle Bin, and perform other operations.
    ''' The Main Recycle Bin is that one that also contains all the deleted items of the other recycle bins.
    ''' </summary>
    Public Class MainBin

#Region " Members "

#Region " Properties "

        ''' <summary>
        ''' Gets all the items inside the Main recycle bin.
        ''' </summary>
        ''' <value>All the items.</value>
        Public Shared ReadOnly Property Items As ShellObject()
            Get
                Return Tools.GetDeletedItems(Nothing)
            End Get
        End Property

        ''' <summary>
        ''' Gets all the files inside the Main recycle bin.
        ''' </summary>
        ''' <value>The files.</value>
        Public Shared ReadOnly Property Files As ShellFile()
            Get
                Return Tools.GetDeletedFiles(Nothing)
            End Get
        End Property

        ''' <summary>
        ''' Gets all the folders inside the Main recycle bin.
        ''' </summary>
        ''' <value>The folders.</value>
        Public Shared ReadOnly Property Folders As ShellFolder()
            Get
                Return Tools.GetDeletedFolders(Nothing)
            End Get
        End Property

        ''' <summary>
        ''' Gets the last deleted item inside the Main recycle bin.
        ''' </summary>
        ''' <value>The folders.</value>
        Public Shared ReadOnly Property LastDeletedItem As ShellObject
            Get
                Return Tools.GetLastDeletedItem(Nothing)
            End Get
        End Property

        ''' <summary>
        ''' Gets the last deleted file inside the Main recycle bin.
        ''' </summary>
        ''' <value>The folders.</value>
        Public Shared ReadOnly Property LastDeletedFile As ShellFile
            Get
                Return Tools.GetLastDeletedFile(Nothing)
            End Get
        End Property

        ''' <summary>
        ''' Gets the last deleted folder inside the Main recycle bin.
        ''' </summary>
        ''' <value>The folders.</value>
        Public Shared ReadOnly Property LastDeletedFolder As ShellFolder
            Get
                Return Tools.GetLastDeletedFolder(Nothing)
            End Get
        End Property

        ''' <summary>
        ''' Gets the accumulated size of the Main recycle bin.
        ''' </summary>
        ''' <value>The folders.</value>
        Public Shared ReadOnly Property Size As Long
            Get
                Return Tools.GetSize(Nothing)
            End Get
        End Property

        ''' <summary>
        ''' Gets the total deleted items count of the Main recycle bin.
        ''' </summary>
        ''' <value>The folders.</value>
        Public Shared ReadOnly Property ItemsCount As Long
            Get
                Return Tools.GetItemsCount(Nothing)
            End Get
        End Property

#End Region

#End Region

#Region " Public Methods "

        ''' <summary>
        ''' Empties the Master Recycle Bin.
        ''' </summary>
        ''' <param name="Flags">Indicates the recycle bin behavior.</param>
        ''' <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
        Public Shared Function Empty(Optional ByVal Flags As Tools.RecycleBinFlags =
                                                             Tools.RecycleBinFlags.DontShowConfirmation) As Boolean

            Return NativeMethods.EmptyRecycleBin(IntPtr.Zero, Nothing, Flags)

        End Function

        ''' <summary>
        ''' Refreshes the Recycle bin icon.
        ''' </summary>
        ''' <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
        Public Shared Function RefreshIcon() As Boolean

            Return NativeMethods.UpdateRecycleBinIcon()

        End Function

#End Region

#Region " Hidden methods "

        ' These methods are purposely hidden from Intellisense just to look better without unneeded methods.
        ' NOTE: The methods can be re-enabled at any-time if needed.

        ''' <summary>
        ''' Equalses this instance.
        ''' </summary>
        <EditorBrowsable(EditorBrowsableState.Never)>
        Public Shadows Sub Equals()
        End Sub

        ''' <summary>
        ''' References the equals.
        ''' </summary>
        <EditorBrowsable(EditorBrowsableState.Never)>
        Public Shadows Sub ReferenceEquals()
        End Sub

#End Region

    End Class

#End Region

#Region " Tools CLASS "

    ''' <summary>
    ''' Retrieves information about the Recycle Bin of an specific drive,
    ''' and perform other operations.
    ''' </summary>
    Public Class Tools

#Region " Members "

#Region " Enumerations "

        ''' <summary>
        ''' Specifies the Recycle bin behavior.
        ''' </summary>
        <Description("'RecycleBinFlags' parameter used in 'EmptyRecycleBin' function.")>
        <Flags>
        Public Enum RecycleBinFlags As Integer

            ''' <summary>
            ''' The dont show confirmation
            ''' </summary>
            DontShowConfirmation = &H1

            ''' <summary>
            ''' The dont show progress UI
            ''' </summary>
            DontShowProgressUI = &H2

            ''' <summary>
            ''' The dont play sound
            ''' </summary>
            DontPlaySound = &H4

        End Enum

        ''' <summary>
        ''' A verb is a string used to specify a particular action that an item supports.
        ''' Invoking a verb is equivalent to selecting a command from an item's context menu.
        ''' Typically, invoking a verb launches a related application.
        ''' For example, invoking the "open" verb on a ".txt" file opens the file with a text editor, usually Notepad.
        ''' </summary>
        <Description("'Verb' parameter used in 'InvokeItemVerb' method.")>
        Public Enum ItemVerbs As Integer

            ''' <summary>
            ''' Opens an item.
            ''' This is usually the default verb.
            ''' </summary>
            Open = 0

            ''' <summary>
            ''' Opens dialog when no program is associated to the file-extension.
            ''' </summary>
            OpenAs = 1

            ''' <summary>
            ''' Opens the default text editor on the item.
            ''' </summary>
            Edit = 2

            ''' <summary>
            ''' Opens the Windows Explorer in the item Folder.
            ''' </summary>
            Explore = 3

            ''' <summary>
            ''' Opens the properties window of the item.
            ''' </summary>
            Properties = 4

            ''' <summary>
            ''' Starts a search.
            ''' </summary>
            Find = 5

            ''' <summary>
            ''' Start printing the file with the default application.
            ''' </summary>
            Print = 6

            ''' <summary>
            ''' Opens the run UAC dialog in the file.
            ''' </summary>
            RunAs = 7

            ''' <summary>
            ''' Copies the item.
            ''' </summary>
            Copy = 8

            ''' <summary>
            ''' Cuts the item.
            ''' </summary>
            Cut = 9

            ''' <summary>
            ''' Pastes the item.
            ''' </summary>
            Paste = 10

            ''' <summary>
            ''' Deletes an item.
            ''' If the Item is inside the recycle bin, it will be permanently deleted.
            ''' </summary>
            Delete = 11

            ''' <summary>
            ''' Undeletes an item from the recycle bin.
            ''' </summary>
            Undelete = 12

        End Enum

#End Region

#End Region

#Region " Public Methods "

        ''' <summary>
        ''' Empties the Recycle Bin of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.
        ''' If this parameter is 'Nothing' then it empties all the Recycle Bins.</param>
        ''' <param name="Flags">Indicates the recycle bin behavior.</param>
        ''' <returns><c>true</c> if operation succeeds, <c>false</c> otherwise.</returns>
        Public Shared Function Empty(ByVal DriveLetter As Char,
                                     Optional ByVal Flags As RecycleBinFlags = Nothing) As Boolean

            Select Case DriveLetter = Nothing

                Case True
                    NativeMethods.EmptyRecycleBin(IntPtr.Zero, String.Empty, Flags)

                Case Else
                    NativeMethods.EmptyRecycleBin(IntPtr.Zero, String.Format("{0}:\", DriveLetter), Flags)

            End Select

        End Function

        ''' <summary>
        ''' Gets the recycle bin accumulated size (in bytes) of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>System.Int64.</returns>
        Public Shared Function GetSize(ByVal DriveLetter As Char) As Long

            Dim sqrbi As New NativeMethods.SHQueryRBInfo() With
                {
                    .StructSize = Marshal.SizeOf(GetType(NativeMethods.SHQueryRBInfo))
                }

            Select Case DriveLetter = Nothing

                Case True
                    NativeMethods.QueryRecycleBin(String.Empty, sqrbi)

                Case Else
                    NativeMethods.QueryRecycleBin(String.Format("{0}:\", DriveLetter), sqrbi)

            End Select

            Return sqrbi.BinSize

        End Function

        ''' <summary>
        ''' Gets the total item count inside the recycle bin of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>System.Int64.</returns>
        Public Shared Function GetItemsCount(ByVal DriveLetter As Char) As Long

            Dim sqrbi As New NativeMethods.SHQueryRBInfo() With
                {
                    .StructSize = Marshal.SizeOf(GetType(NativeMethods.SHQueryRBInfo))
                }

            Select Case DriveLetter = Nothing

                Case True
                    NativeMethods.QueryRecycleBin(String.Empty, sqrbi)

                Case Else
                    NativeMethods.QueryRecycleBin(String.Format("{0}:\", DriveLetter), sqrbi)

            End Select

            Return sqrbi.ItemCount

        End Function

        ''' <summary>
        ''' Gets all the deleted items inside the recycle bin of an specific Drive,
        ''' this means all Files and Folders.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>ShellObject[][].</returns>
        Public Shared Function GetDeletedItems(ByVal DriveLetter As Char) As ShellObject()

            Return (From Item As ShellObject In RecycleBin
                    Where If(DriveLetter = Nothing,
                             Item.Name = Item.Name,
                             Item.Name.StartsWith(DriveLetter,
                                                  StringComparison.InvariantCultureIgnoreCase))).
                    ToArray()

        End Function

        ''' <summary>
        ''' Gets the deleted files inside the recycle bin of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>ShellFile[][].</returns>
        Public Shared Function GetDeletedFiles(ByVal DriveLetter As Char) As ShellFile()

            Return GetDeletedItems(Of ShellFile)(DriveLetter)

        End Function

        ''' <summary>
        ''' Gets the deleted folders inside the recycle bin of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>IKnownFolder[][].</returns>
        Public Shared Function GetDeletedFolders(ByVal DriveLetter As Char) As ShellFolder()

            Return GetDeletedItems(Of FileSystemKnownFolder)(DriveLetter).
                   Cast(Of ShellFolder).
                   Concat(GetDeletedItems(Of NonFileSystemKnownFolder)(DriveLetter)).
                   Cast(Of ShellFolder).ToArray

        End Function

        ''' <summary>
        ''' Gets the last deleted item inside the recycle bin of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>ShellObject.</returns>
        Public Shared Function GetLastDeletedItem(ByVal DriveLetter As Char) As ShellObject

            Return (From Item As ShellObject
                    In GetDeletedItems(DriveLetter)
                    Order By Item.Properties.GetProperty("DateDeleted").ValueAsObject
                    Descending).
                    First

        End Function

        ''' <summary>
        ''' Gets the last deleted file inside the recycle bin of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>ShellFile.</returns>
        Public Shared Function GetLastDeletedFile(ByVal DriveLetter As Char) As ShellFile

            Return (From Item As ShellFile
                    In GetDeletedItems(Of ShellFile)(DriveLetter)
                    Order By Item.Properties.GetProperty("DateDeleted").ValueAsObject
                    Descending).
                    First

        End Function

        ''' <summary>
        ''' Gets the last deleted folder inside the recycle bin of an specific Drive.
        ''' </summary>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.</param>
        ''' <returns>ShellFolder.</returns>
        Public Shared Function GetLastDeletedFolder(ByVal DriveLetter As Char) As ShellFolder

            Return (From Item As ShellFolder
                    In GetDeletedFolders(DriveLetter)
                    Order By Item.Properties.GetProperty("DateDeleted").ValueAsObject
                    Descending).
                    First

        End Function

        ''' <summary>
        ''' Permanently deletes a deleted Item.
        ''' </summary>
        ''' <param name="Item">The item to permanently delete.</param>
        Public Shared Sub DeleteItem(ByVal Item As ShellObject)

            InvokeItemVerb(Item, ItemVerbs.Delete)

        End Sub

        ''' <summary>
        ''' Undeletes a deleted Item.
        ''' </summary>
        ''' <param name="Item">The item to undelete.</param>
        Public Shared Sub UndeleteItem(ByVal Item As ShellObject)

            InvokeItemVerb(Item, ItemVerbs.Undelete)

        End Sub

        ''' <summary>
        ''' Invokes a custom verb on a ShellObject item.
        ''' </summary>
        ''' <param name="ShellObject">
        ''' Indicates the item.
        ''' </param>
        ''' <param name="Verb">
        ''' Indicates the verb to invoke on the item.
        ''' </param>
        Public Shared Sub InvokeItemVerb(ByVal [ShellObject] As ShellObject,
                                         ByVal Verb As String)

            Dim FileName As String =
                [ShellObject].ParsingName.Split("\").Last

            Dim FileDir As String =
                Path.GetDirectoryName([ShellObject].ParsingName)

            Dim sei As New NativeMethods.ShellExecuteInfo

            With sei

                .cbSize = Marshal.SizeOf(sei)

                ' Here we want ONLY the file name (without the path).
                .lpFile = FileName

                ' Here we want the exact directory from the parsing name.
                .lpDirectory = FileDir

                ' Here the show command.
                .nShow = WindowShowCommand.Show

                ' Here the verb to invoke.
                .lpVerb = Verb

            End With

            ' Invoke the verb.
            NativeMethods.ShellExecuteEx(sei)

        End Sub

        ''' <summary>
        ''' Invokes a verb on a ShellObject item.
        ''' </summary>
        ''' <param name="ShellObject">
        ''' Indicates the item.
        ''' </param>
        ''' <param name="Verb">
        ''' Indicates the verb to invoke on the item.
        ''' </param>
        Public Shared Sub InvokeItemVerb(ByVal [ShellObject] As ShellObject,
                                         ByVal Verb As ItemVerbs)

            InvokeItemVerb([ShellObject], Verb.ToString)

        End Sub

#End Region

#Region " Private Methods "

        ''' <summary>
        ''' Gets the deleted items inside the recycle bin.
        ''' </summary>
        ''' <typeparam name="T">Indicates the kind of deleted items to retrieve (Files, Folders, etc...)</typeparam>
        ''' <param name="DriveLetter">Indicates an specific recycle bin drive letter.
        ''' If this parameter is 'Nothing' then it returns the merged contents of all the Recycle Bins.</param>
        ''' <returns>``0[][].</returns>
        Private Shared Function GetDeletedItems(Of T)(Optional ByVal DriveLetter As Char = Nothing) As T()

            Return (From Item As ShellObject In RecycleBin
                    Where If(DriveLetter = Nothing,
                             Item.GetType = GetType(T),
                             Item.GetType = GetType(T) _
                                  AndAlso Item.Name.StartsWith(DriveLetter,
                                                               StringComparison.InvariantCultureIgnoreCase))).
                    Cast(Of T).
                    ToArray()

        End Function

#End Region

#Region " Hidden methods "

        ' These methods are purposely hidden from Intellisense just to look better without unneeded methods.
        ' NOTE: The methods can be re-enabled at any-time if needed.

        ''' <summary>
        ''' Equalses this instance.
        ''' </summary>
        <EditorBrowsable(EditorBrowsableState.Never)>
        Public Shadows Sub Equals()
        End Sub

        ''' <summary>
        ''' References the equals.
        ''' </summary>
        <EditorBrowsable(EditorBrowsableState.Never)>
        Public Shadows Sub ReferenceEquals()
        End Sub

#End Region

    End Class

#End Region

#Region " Hidden methods "

    ' These methods are purposely hidden from Intellisense just to look better without unneeded methods.
    ' NOTE: The methods can be re-enabled at any-time if needed.

    ''' <summary>
    ''' Equalses this instance.
    ''' </summary>
    <EditorBrowsable(EditorBrowsableState.Never)>
    Public Shadows Sub Equals()
    End Sub

    ''' <summary>
    ''' References the equals.
    ''' </summary>
    <EditorBrowsable(EditorBrowsableState.Never)>
    Public Shadows Sub ReferenceEquals()
    End Sub

#End Region

End Class

]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
