<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
<CodeSnippet Format="1.0.0">

<Header>
  <Title>Xml Extensions</Title>
  <Description>Contains custom extension methods to use with some of the "System.Xml" namespace members.</Description>
  <Author>Elektro</Author>
</Header>

<Snippet>

<Declarations>
  <Literal Editable="false">
    <ID>CDATAEnd</ID>
    <ToolTip>CDATA end tag to scape XML illegal characters if needed.</ToolTip>
    <Default>&gt;</Default>
  </Literal>
</Declarations>

<Code Language="vb"><![CDATA[

' ***********************************************************************
' Author   : Elektro
' Modified : 16-June-2015
' ***********************************************************************
' <copyright file="XmlExtensions.vb" company="Elektro Studios">
'     Copyright (c) Elektro Studios. All rights reserved.
' </copyright>
' ***********************************************************************

#Region " Public Members Summary "

#Region " Functions "

' IEnumerable(Of XElement).DistinctByElement(string)
' IEnumerable(Of XElement).SortByElement(string)

' XDocument.DistinctByElement(string, string)
' XDocument.GetXPaths()
' XDocument.SortByElement(string, string)
' XDocument.ToXmlDocument()

' XmlDocument.DistinctByElement(string, string)
' XmlDocument.GetXPaths()
' XmlDocument.SortByElement(string, string)
' XmlDocument.ToXDocument()

#End Region

#End Region

#Region " Option Statements "

Option Strict On
Option Explicit On
Option Infer Off

#End Region

#Region " Imports "

Imports Microsoft.VisualBasic
Imports System
Imports System.Diagnostics
Imports System.Runtime.CompilerServices
Imports System.Xml
Imports System.Xml.Linq

#End Region

#Region " Xml Extensions "

''' <summary>
''' Contains custom extension methods to use with some of the <see cref="System.Xml"/> namespace members.
''' </summary>
Public Module XmlExtensions

#Region " Public Extension Methods "

#Region " Type Conversion "

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Convert XmlDocument to XDocument
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xml As String =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 3.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>.ToString
    '''
    ''' Dim xmlDoc As New XmlDocument
    ''' xmlDoc.LoadXml(xml)
    '''
    ''' Dim xDoc As XDocument = xmlDoc.ToXDocument
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Converts an <see cref="XmlDocument"/> to <see cref="XDocument"/>.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XmlDocument"/>.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The <see cref="XDocument"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function ToXDocument(ByVal sender As XmlDocument) As XDocument

        Return XDocument.Parse(sender.InnerXml.TrimStart(ControlChars.Lf, " "c))

    End Function

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Convert XDocument to XmlDocument
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xDoc As XDocument =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 3.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>
    '''
    ''' Dim xmlDoc As XmlDocument = xDoc.ToXmlDocument   
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Converts an <see cref="XDocument"/> to <see cref="XmlDocument"/>.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XDocument"/>.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The <see cref="XmlDocument"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function ToXmlDocument(ByVal sender As XDocument) As XmlDocument

        Dim xmlDoc As New XmlDocument
        xmlDoc.LoadXml(sender.ToString)
        Return xmlDoc

    End Function

#End Region

#Region " X-Path "

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Get Xml X-Paths from XmlDocument.
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xml As String =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 3.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>.ToString
    '''
    ''' Dim xmlDoc As New XmlDocument
    ''' xmlDoc.LoadXml(xml)
    '''
    ''' Dim xPathList As IEnumerable(Of String) = xmlDoc.GetXPaths
    ''' MessageBox.Show(String.Join(Environment.NewLine, xPathList))
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Gets a <see cref="IEnumerable(Of String)"/> collection with the avaliable XPath expressions of an <see cref="XmlDocument"/> document.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XmlDocument"/>.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' A <see cref="IEnumerable(Of String)"/> collection with the avaliable XPath expressions.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function GetXPaths(ByVal sender As XmlDocument) As IEnumerable(Of String)

        ' Dim xmlReader As XmlReader = sender.CreateNavigator.ReadSubtree
        Dim nodeList As New List(Of String)
        Dim xPathList As New List(Of String)
        Dim xPath As String

        Using xmlReader As XmlReader = sender.CreateNavigator.ReadSubtree

            While xmlReader.Read

                If xmlReader.NodeType = XmlNodeType.Element Then

                    If nodeList.Count <= xmlReader.Depth Then
                        nodeList.Add(xmlReader.Name)
                    Else
                        nodeList(xmlReader.Depth) = xmlReader.Name
                    End If

                    xPath = String.Join("/", nodeList.ToArray(), 0, xmlReader.Depth + 1)

                    If Not xPathList.Contains(xPath) Then
                        xPathList.Add(xPath)
                    End If

                End If

            End While

            Return xPathList

        End Using

    End Function

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Get Xml X-Paths from XDocument.
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks> 
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xDoc As XDocument =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 3.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>
    '''
    ''' Dim xPathList As IEnumerable(Of String) = xDoc.GetXPaths
    ''' MessageBox.Show(String.Join(Environment.NewLine, xPathList))
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Gets a <see cref="IEnumerable(Of String)"/> collection with the avaliable XPath expressions of an <see cref="XDocument"/> document.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XDocument"/>.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' A <see cref="IEnumerable(Of String)"/> collection with the avaliable XPath expressions.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function GetXPaths(ByVal sender As XDocument) As IEnumerable(Of String)

        Return sender.ToXmlDocument.GetXPaths

    End Function

#End Region

#Region " Duplicate Removal "

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Delete Duplicated Elements from XDocument
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks> 
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xDoc As XDocument =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>
    '''
    ''' xDoc = xDoc.DistinctByElement(rootElement:="Song", elementToDistinct:="Name")
    ''' MessageBox.Show(xDoc.ToString)
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Deletes duplicated values by the specified element of an <see cref="XDocument"/>.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XDocument"/>.
    ''' </param>
    ''' 
    ''' <param name="rootElementName">
    ''' The root Xml element name.
    ''' </param>
    ''' 
    ''' <param name="elementNameToDistinct">
    ''' The element name to remove its duplicated values.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The <see cref="XDocument"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function DistinctByElement(ByVal sender As XDocument,
                                      ByVal rootElementName As String,
                                      ByVal elementNameToDistinct As String) As XDocument

        sender.Root.Elements(rootElementName).
                    GroupBy(Function(s) s.Element(elementNameToDistinct).Value).
                    SelectMany(Function(g) g.Skip(1)).
                    Remove()

        Return sender

    End Function

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Delete Duplicated Elements from XmlDocument
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks> 
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xml As String =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>.ToString
    '''
    ''' Dim xmlDoc As New XmlDocument
    ''' xmlDoc.LoadXml(xml)
    '''
    ''' xmlDoc = xmlDoc.DistinctByElement(rootElement:="Song", elementToDistinct:="Name")
    ''' MessageBox.Show(xmlDoc.InnerXml)
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Deletes duplicated values by the specified element of an <see cref="XmlDocument"/>.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XmlDocument"/>.
    ''' </param>
    ''' 
    ''' <param name="rootElementName">
    ''' The root Xml element name.
    ''' </param>
    ''' 
    ''' <param name="elementNameToDistinc">
    ''' The element name to remove its duplicated values.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The <see cref="XmlDocument"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function DistinctByElement(ByVal sender As XmlDocument,
                                      ByVal rootElementName As String,
                                      ByVal elementNameToDistinct As String) As XmlDocument

        Return sender.ToXDocument.DistinctByElement(rootElementName, elementNameToDistinct).ToXmlDocument

    End Function

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Delete Duplicated Elements from IEnumerable(Of XElement)
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks> 
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xDoc As XDocument =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>
    '''
    ''' For Each el As XElement In xDoc.<Songs>.<Song>.DistinctByElement(elementToDistinct:="Name")
    '''     MessageBox.Show(el.Value)
    ''' Next
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Deletes duplicated values by the specified element of an <see cref="IEnumerable(Of XElement)"/>.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="IEnumerable(Of XElement)"/>.
    ''' </param>
    ''' 
    ''' <param name="elementNameToDistinct">
    ''' The element name to remove its duplicated values.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The <see cref="IEnumerable(Of XElement)"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function DistinctByElement(ByVal sender As IEnumerable(Of XElement),
                                      ByVal elementNameToDistinct As String) As IEnumerable(Of XElement)

        sender.GroupBy(Function(s) s.Element(elementNameToDistinct).Value).
               SelectMany(Function(g) g.Skip(1)).
               Remove()

        Return sender

    End Function

#End Region

#Region " Sorting "

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Sort Elements of an <see cref="XDocument"/>.
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks> 
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xDoc As XDocument =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 3.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>
    '''
    ''' xDoc = xDoc.SortByElement(rootElementName:="Song", elementNameToSort:="Name")
    '''
    ''' MessageBox.Show(xDoc.ToString)
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Sorts an <see cref="XDocument"/> by the specified element.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XDocument"/>.
    ''' </param>
    ''' 
    ''' <param name="rootElementName">
    ''' The root element name.
    ''' </param>
    ''' 
    ''' <param name="elementNameToSort">
    ''' The element name to sort by.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The sorted <see cref="XDocument"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function SortByElement(ByVal sender As XDocument,
                                  ByVal rootElementName As String,
                                  ByVal elementNameToSort As String) As XDocument

        sender.Root.ReplaceNodes(sender.Root.Elements(rootElementName).
                    OrderBy(Function(xElement As XElement) xElement.Element(elementNameToSort).Value))

        Return sender

    End Function

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Sort Elements of an <see cref="XmlDocument"/>.
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks> 
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xml As String =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 3.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>.ToString
    '''
    ''' Dim xmlDoc As New XmlDocument
    ''' xmlDoc.LoadXml(xml)
    '''
    ''' xmlDoc = xmlDoc.SortByElement(rootElementName:="Song", elementNameToSort:="Name")
    ''' MessageBox.Show(xmlDoc.InnerXml)
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Sorts an <see cref="XmlDocument"/> by the specified element.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="XmlDocument"/>.
    ''' </param>
    ''' 
    ''' <param name="rootElementName">
    ''' The root element name.
    ''' </param>
    ''' 
    ''' <param name="elementNameToSort">
    ''' The element name to sort by.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The sorted <see cref="XmlDocument"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function SortByElement(ByVal sender As XmlDocument,
                                  ByVal rootElementName As String,
                                  ByVal elementNameToSort As String) As XmlDocument

        Return sender.ToXDocument.SortByElement(rootElementName, elementNameToSort).ToXmlDocument

    End Function

    ''' ----------------------------------------------------------------------------------------------------
    ''' <remarks>
    ''' Title : Sort Elements of an <see cref="IEnumerable(Of XElement)"/>.
    ''' Author: Elektro
    ''' Date  : 16-June-2015
    ''' </remarks> 
    ''' ----------------------------------------------------------------------------------------------------
    ''' <example>
    ''' Dim xml As String =
    '''     <?xml version="1.0" encoding="Windows-1252"?>
    '''     <!--XML Songs Database-->
    '''     <Songs>
    '''         <Song><Name>My Song 3.mp3</Name></Song>
    '''         <Song><Name>My Song 1.mp3</Name></Song>
    '''         <Song><Name>My Song 2.mp3</Name></Song>
    '''     </Songs>.ToString
    '''
    ''' Dim xmlDoc As New XmlDocument
    ''' xmlDoc.LoadXml(xml)
    '''
    ''' xmlDoc = xmlDoc.SortByElement(rootElementName:="Song", elementNameToSort:="Name")
    ''' MessageBox.Show(xmlDoc.InnerXml)
    ''' </example>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <summary>
    ''' Sorts an <see cref="IEnumerable(Of XElement)"/> by the specified element.
    ''' </summary>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <param name="sender">
    ''' The source <see cref="IEnumerable(Of XElement)"/>.
    ''' </param>
    ''' 
    ''' <param name="elementNameToSort">
    ''' The element name to sort by.
    ''' </param>
    ''' ----------------------------------------------------------------------------------------------------
    ''' <returns>
    ''' The sorted <see cref="IEnumerable(Of XElement)"/>.
    ''' </returns>
    ''' ----------------------------------------------------------------------------------------------------
    <DebuggerStepThrough>
    <Extension>
    Public Function SortByElement(ByVal sender As IEnumerable(Of XElement),
                                  ByVal elementNameToSort As String) As IEnumerable(Of XElement)

        Return sender.OrderBy(Function(xElement As XElement) xElement.Element(elementNameToSort).Value)

    End Function

#End Region

#End Region

End Module

#End Region

]]></Code>
  </Snippet>
 </CodeSnippet>
</CodeSnippets>